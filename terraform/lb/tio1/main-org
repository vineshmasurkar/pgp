provider "aws" {
  region = "us-east-1"
}

variable "pgp_ami" {
  type = string
  default = "ami-06d5e0de6baf595ca"
}

variable "pgp_instance_type" {
  type = string
  default = "t2.micro"
}

data "aws_vpc" "default" {
  default = true
}

variable "instance_set" {
  type = set(string)
  default = ["httpserver1", "httpserver2"]
  #default = ["httpserver1"]
}

# EC2 instances
resource "aws_instance" "vms" {
  for_each = var.instance_set
    ami = var.pgp_ami
    instance_type     = var.pgp_instance_type
    user_data         = file("server-script.sh")
    security_groups = [aws_security_group.tio2-sg.name]
    tags = {
      Name = each.value
    }
}

variable "ingressrules" {
  type = list(object({
    port     = number
    protocol = string
  }))
  default = [
    {
      port     = 22
      protocol = "tcp"
    },
    {
      port     = 80
      protocol = "tcp"
    }
  ]
}

variable "egressrules" {
  type = list(object({
    port     = number
    protocol = string
  }))
  default = [
    {
      port     = 22
      protocol = "tcp"
    },
    {
      port     = 80
      protocol = "tcp"
    }
  ]
}

# Security Group
resource "aws_security_group" "tio2-sg" {
  name        = "tio2-sg"
  description = "Opens security groups for ssh and http"
  vpc_id      = data.aws_vpc.default.id
  dynamic "ingress" {
      iterator = iter
      for_each = var.ingressrules
      content {
          from_port = iter.value.port
          to_port = iter.value.port
          protocol = iter.value.protocol
          cidr_blocks = ["0.0.0.0/0"]
      }
  }
    dynamic "ingress" {
      iterator = iter
      for_each = var.egressrules
      content {
          from_port = iter.value.port
          to_port = iter.value.port
          protocol = iter.value.protocol
          cidr_blocks = ["0.0.0.0/0"]
      }
  }
  tags = {
    Name = "tio2-sg"
  }
}

resource "aws_lb_target_group" "tio2-web-tg" {
  name     = "web-tg"
  port     = 80
  protocol = "HTTP"
  target_type = "instance"
  vpc_id   = data.aws_vpc.default.id

  health_check {
    enabled = true
    path = "/health.html"
    healthy_threshold = 2
    timeout = 3
  }
}

variable "instance_list" {
  description = "Push these instances to ALB"
  type = list(string)
  default = values(aws_instance.vms).*.id 
  #["i00001", "i00002", "i00003"]
}

# resource "aws_lb_target_group_attachment" "tio2-web-tga" {
#   count = length(var.instance_set)
#   target_group_arn  = aws_lb_target_group.tio2-web-tg.arn
#   target_id = "${element(split(",", join(",", aws_instance.vms.*.id)), count.index)}"
#   # target_id = values(aws_instance.vms).*.id
#   port = 80
# }  

# variable "test" {
#   type = list(string)
#   default = [ "value1", "value2" ]
# }

# output "test-out" {
#   value = "${element(split(",", join(",", aws_instance.vms.*.id)), count.index)}"
# }

  # target_id         = var.ec2_instance_ids[count.index].id
  # # target_id         = var.ec2_instance_ids[count.index].id
  # # port              = 80
  # target {
  #  target_id = "${aws_instance.test.id}"
  #  port = 80
  # }
  # target {
  #  target_id = "${aws_instance.demo.id}"
  #  port = 8080
  # }
# }

# resource "aws_vpc" "main" {
#   cidr_block = "10.0.0.0/16"
# }

# resource "aws_lb" "tio2-web-lb" {
#   name               = "web-lb"
#   load_balancer_type = "application"
#   subnets            = [for subnet in aws_subnet.public : subnet.id]
#   tags = {
#     Activity = "lb-tio1"
#   }
# }

output "ec2_instance_ids" {
  value = values(aws_instance.vms).*.id
}

output "ec2_instance_sg_ids" {
  value = values(aws_instance.vms).*.security_groups
}

output "ec2_instance_public_ips" {
  value = values(aws_instance.vms).*.public_ip
}

output "aws_security_group_id" {
  value = aws_security_group.tio2-sg.id
}

# output "ec2_instance_ids" {
#   value = [
#     { for idt, inst in aws_instance.vms : idt => inst.id  },
#     { for pubip, inst in aws_instance.vms : pubip => inst.public_ip  },
#     { for sg, inst in aws_instance.vms : sg => inst.security_groups  }
#   ]
# }
# 
# output "ec2_instance_idmap" {
#   value = tomap(
#       { for ky, val in aws_instance.vms : ky => val.id  }
#     )
# }
# 
# output "ec2_instance_public_ipmap" {
#   value = tomap(
#       { for ky, val in aws_instance.vms : ky => val.public_ip  }
#     )
# }
# 
# output "ec2_instance_sg_idmap" {
#   value = tomap(
#       { for ky, val in aws_instance.vms : ky => val.security_groups  }
#     )
# }
# 
# output "aws_security_group_id" {
#   value = aws_security_group.tio2-sg.id
# }